1)

declare
	n number:=&n;
	m number;
	rev number:=0;
begin
	m:=n;
	while m>0 loop
		rev:=rev*10+mod(m,10);
		m:=floor(m/10);
	end loop;
	if rev=n then
		dbms_output.put_line(n||' is a palindrome');
	else
		dbms_output.put_line(n||' is not a palindrome');
	end if;
end;

output

Enter value for n: 123454321
old   2:        n number:=&n;
new   2:        n number:=123454321;
123454321 is a palindrome

PL/SQL procedure successfully completed.

2)

declare
	n number:=&n;
	a number:=0;
	b number:=1;
	c number;
	i number:=0;
begin
	dbms_output.put_line('The first '||n||' fibonacci numbers are');
	if n=1 then
		dbms_output.put_line(a);
	elsif n=2 then
		dbms_output.put_line(a);
		dbms_output.put_line(b);
	else
		dbms_output.put_line(a);
		dbms_output.put_line(b);
		while i<n-2 loop
			c:=a+b;
			a:=b;
			b:=c;
			dbms_output.put_line(c);
			i:=i+1;
		end loop;
	end if;
end;

#output 

Enter value for n: 10
old   2:        n number:=&n;
new   2:        n number:=10;
The first 10 fibonacci numbers are
0
1
1
2
3
5
8
13
21
34

3)

declare
	n number:=&n;
	c number:=0;
	i number:=0;
begin
	for i in 2..sqrt(n/2) loop
		if mod(n,i)=0 then
			c:=1;
			exit when c=1;
		end if;
	end loop;
	if c=1 then
		dbms_output.put_line(n||' is not a prime number');
	else
		dbms_output.put_line(n||' is a prime number');
	end if;
end;


SQL> /
Enter value for n: 66
old   2:        n number:=&n;
new   2:        n number:=66;
66 is not a prime number

PL/SQL procedure successfully completed.

SQL> /
Enter value for n: 199
old   2:        n number:=&n;
new   2:        n number:=199;
199 is a prime number

PL/SQL procedure successfully completed.

4)

declare
   a number:=&first;
   b number:=&second;
   m number;
   n number;
   hcf number;
   lcm number;
begin
   if a>b then
           m:=a;
   else
           m:=b;
   end if;
   loop
           if mod(m,a)=0 and mod(m,b)=0 then
                   exit;
           else
                   m:=m+1;
           end if;
   end loop;
   lcm:=m;
   hcf:=b;
   n:=a;
   loop
           m:=n;
           n:=mod(hcf,n);
           hcf:=m;
           if n=0 then
                   exit;
           end if;
   end loop;
   insert into demo_tab values(a,b,lcm,hcf);
end;


Enter value for first: 45
old   2:        a number:=&first;
new   2:        a number:=45;
Enter value for second: 43
old   3:        b number:=&second;
new   3:        b number:=43;

PL/SQL procedure successfully completed.

SQL> select * from demo_tab;

     FIRST     SECOND        LCM        HCF
---------- ---------- ---------- ----------
        45         43       1935          1
        
        
5)
SQL> create table demo(n number(2),n_square number(4),n_cube number(6));

declare 
 i number;
begin
 for i in 1..10 loop
	insert into demo values(i,i*i,i*i*i);
 end loop;
end;

SQL> select * from demo;

         N   N_SQUARE     N_CUBE
---------- ---------- ----------
         1          1          1
         2          4          8
         3          9         27
         4         16         64
         5         25        125
         6         36        216
         7         49        343
         8         64        512
         9         81        729
        10        100       1000

10 rows selected.

6)
SQL> create table inventory(product_id number(5),product_name varchar(20),quantity number(4));

Table created.

create table purchase_record(product_id number(5),status varchar(30),dates varchar(10))

Table created.

SQL> select * from inventory;

PRODUCT_ID PRODUCT_NAME           QUANTITY
---------- -------------------- ----------
      1001 soap                          3
      1002 brush                         3
      1003 plate                         0
      1004 dress                         6


declare
 q inventory.quantity%type:=&quantity;
 p_id inventory.product_id%type;
 q1 inventory.quantity%type;
begin
 select product_id into p_id from inventory where quantity=q;
 if q>0 then
	insert into purchase_record values(p_id,'PURCHASED',sysdate);
	update inventory set quantity=quantity-1 where product_id=p_id;
 else
	insert into purchase_record values(p_id,'OUT OF STOCK',sysdate);
 end if;
end;



SQL> @Z:\plsql\record.sql;
 14  /
Enter value for quantity: 6
old   2:  q inventory.quantity%type:=&quantity;
new   2:  q inventory.quantity%type:=6;

PL/SQL procedure successfully completed.


SQL> select * from purchase_record;

PRODUCT_ID STATUS                         DATES
---------- ------------------------------ ----------
      1004 PURCHASED                      02-SEP-22

SQL> select * from inventory;

PRODUCT_ID PRODUCT_NAME           QUANTITY
---------- -------------------- ----------
      1001 soap                          3
      1002 brush                         3
      1003 plate                         0
      1004 dress                         5

SQL> @Z:\plsql\record.sql;
 14  /
Enter value for quantity: 0
old   2:  q inventory.quantity%type:=&quantity;
new   2:  q inventory.quantity%type:=0;

PL/SQL procedure successfully completed.

SQL> select * from purchase_record;

PRODUCT_ID STATUS                         DATES
---------- ------------------------------ ----------
      1004 PURCHASED                      02-SEP-22
      1003 OUT OF STOCK                   02-SEP-22

7)

SQL> create table employee(eno number(5),ename varchar(30),basic_pay number(10));

Table created.

SQL> insert into employee values(&eno,&ename,&basic_pay);
Enter value for eno: 10001
Enter value for ename: 'Sravani'
Enter value for basic_pay: 12328
old   1: insert into employee values(&eno,&ename,&basic_pay)
new   1: insert into employee values(10001,'Sravani',12328)

1 row created.

SQL> /
Enter value for eno: 10002
Enter value for ename: 'Vindhya'
Enter value for basic_pay: 45312
old   1: insert into employee values(&eno,&ename,&basic_pay)
new   1: insert into employee values(10002,'Vindhya',45312)

1 row created.

SQL> /
Enter value for eno: 10003
Enter value for ename: 'Vijaya'
Enter value for basic_pay: 23134
old   1: insert into employee values(&eno,&ename,&basic_pay)
new   1: insert into employee values(10003,'Vijaya',23134)

1 row created.

SQL> /
Enter value for eno: 10004
Enter value for ename: 'Praveena'
Enter value for basic_pay: 54211
old   1: insert into employee values(&eno,&ename,&basic_pay)
new   1: insert into employee values(10004,'Praveena',54211)

1 row created.

declare
	hra number;
	da number;
	pf number;
	pt number;
	gross_salary number;
	net_salary number;
	b_p employee.basic_pay%type;
	emp employee.ename%type;
	eno employee.eno%type;
begin
	emp:=&Employee;
	select basic_pay into b_p from employee where ename=emp;
	select eno into eno from employee where ename=emp;
	hra:=b_p*0.15;
	da:=b_p*0.62;
	gross_salary:=b_p+hra+da;
	if gross_salary>8000 then
		pf:=780;
	else
		pf:=600;
	end if;
	pt:=0.02*b_p;
	net_salary:=gross_salary-pf-pt;
	dbms_output.put_line('Employee number = '||eno||', Employee name = '||emp||', HRA = '||hra||', DA = '||da||', PF = '||pf||', PTax = '||pt||', Gross salary = '||gross_salary||', Net Salary = '||net_salary);
end;
	
SQL> @C:\Users\kallu\Desktop\dbms_lab\plsql7.sql;
 29  /
Enter value for employee: 'Sravani'
old  12:        emp:=&Employee;
new  12:        emp:='Sravani';
Employee number = 10001, Employee name = Sravani, HRA = 1849.2, DA = 7643.36, PF
= 780, PTax = 246.56, Gross salary = 21820.56, Net Salary = 20794

PL/SQL procedure successfully completed.

8)

SQL> create table emp(empid number(5),name varchar(30),salary number(8),dno number(2));

Table created.

SQL> create table del_history(dno number(2),rows_deleted number(5),date1 varchar(10));

Table created.

SQL> select * from emp;

 EMPID NAME                               SALARY        DNO
------ ------------------------------ ---------- ----------
 10001 Sravani                             42312          2
 10002 Vindhya                             32134          1
 10003 Vijaya                              34213          1
 10004 Praveena                            65231          2
 10005 Madhavi                             23134          1

declare
	d emp.dno%type:=&department;
	row_delete number;
begin
	delete from emp where dno=d;
	row_delete:=sql%rowcount;
	insert into del_history values(dno,row_delete,sysdate);
end;

SQL> select * from del_history;

       DNO ROWS_DELETED DATE1
---------- ------------ ----------
         2            2 09-SEP-22

SQL> select * from emp;

  EMPID NAME                               SALARY        DNO
------- ------------------------------ ---------- ----------
   10002 Vindhya                             32134          1
   10003 Vijaya                              34213          1
   10005 Madhavi                             23134          1
     

9)
create table employee(empno number(5),name varchar(30),salary number(8),designation varchar(10),deptID varchar(10));

Table created.

SQL> select empno,salary from employee;

     EMPNO     SALARY
---------- ----------
     10001      24335
     10002       4211
     10003       1234
     10004      12313
     10005       1331
     10006      43213
     10007        230
     10008       2213

8 rows selected.

declare
	cursor c is select empno,salary from employee order by salary;
	cursor c1 is select empno,salary from employee order by salary desc;
	e_no employee.empno%type;
	sal employee.salary%type;
	i number:=0;
begin
	open c;
	open c1;
	dbms_output.put_line('First Highest paid employee');
	dbms_output.put_line('Emp_no Salary');
	for i in 1..5 loop
		exit when c1%notfound;
		fetch c1 into e_no,sal;
		dbms_output.put_line(e_no||' '||sal);
	end loop;
	dbms_output.put_line('First Lowest paid employee');
	dbms_output.put_line('Emp_no Salary');
	for i in 1..5 loop
		exit when c%notfound;
		fetch c into e_no,sal;
		dbms_output.put_line(e_no||' '||sal);
	end loop;
	close c;
	close c1;
end;

First Highest paid employee
Emp_no Salary
10006 43213
10001 24335
10004 12313
10002 4211
10008 2213
First Lowest paid employee
Emp_no Salary
10007 230
10003 1234
10005 1331
10008 2213
10002 4211

PL/SQL procedure successfully completed.

10)


SQL> create table bank_main(acc_no number(4),name varchar(20),address varchar(20),acc_type varchar(1),curr_balance number(10));

Table created.

SQL> select * from bank_main;

    ACC_NO NAME                 ADDRESS              A CURR_BALANCE
---------- -------------------- -------------------- - ------------
      1001 Ramu                 Guntur               S        15000
      1002 Bindu                Vizag                S        10000
      1003 Abilash              Hyderabad            C        10000
      1004 Babu                 Vijayawada           C         9000


SQL> create table bank_trans(acc_no number(4),tr_type varchar(1),tr_date varchar(10),tr_amt number(10),upd_flag varchar(1));

Table created.

SQL> select * from bank_trans;

    ACC_NO T TR_DATE        TR_AMT U
---------- - ---------- ---------- -
      1001 D 02-09-2002       5000 N
      1002 W 02-09-2002       2000 Y
      1003 D 02-09-2002       4000 Y
      1004 W 02-09-2002      10000 N




11)

SQL> create table stud(id number(3),dept varchar(5));

Table created.

SQL> select * from stud;

ID       DEPT
-------- -----
Y20CS009 CSE
Y20EC019 ECE
Y20CS074 CSE
Y20CS134 CSE
Y20EC193 ECE

declare 
	a number:=&number1;
	b number:=&number2;
	c number;
	stu_id stud.id%type;
begin
	select id into stu_id from stud where dept='EEE';
	select id into stu_id from stud where dept='CSE';
	c:=a/b;
exception
	when no_data_found then
		dbms_output.put_line('No rows selected');
	when too_many_rows then
		dbms_output.put_line('More than one row is selected');
	when zero_divide then
		dbms_output.put_line('A number can not divide by zero');
end;

Enter value for number1: 12
old   2:        a number:=&number1;
new   2:        a number:=12;
Enter value for number2: 0
old   3:        b number:=&number2;
new   3:        b number:=0;
No rows selected

PL/SQL procedure successfully completed.

12)

SQL> create table inventory(product_id number(5),product_name varchar(20),quantity number(3));

Table created.

SQL> select * from inventory;

SQL> select * from inventory;

PRODUCT_ID PRODUCT_NAME           QUANTITY
---------- -------------------- ----------
     12312 Add wash                     10
     12313 Gril                         -1
     12314 Power Bot                     3
     12315 Galaxy s7                     5
     12316 Notebook 9                   17
     12317 4 Door Flex                  3

6 rows selected.

declare
	cursor c is select quantity from inventory;
	neagtive_quantity EXCEPTION;
	q inventory.quantity%type;
begin
	open c;
	loop
		exit when c%notfound;
		fetch c into q;
		if q<0 then
			raise neagtive_quantity;
		end if;
	end loop;
exception
	when neagtive_quantity then
		dbms_output.put_line('The quantity of the product is less than zero');
		update inventory set quantity=0 where quantity=q;
end;
	
SQL> @C:\Users\kallu\Desktop\dbms_lab\plsql12.sql;
 21  /
The quantity of the product is less than zero

PL/SQL procedure successfully completed.

SQL> select * from inventory;

PRODUCT_ID PRODUCT_NAME           QUANTITY
---------- -------------------- ----------
     12312 Add wash                     10
     12313 Gril                          0
     12314 Power Bot                     3
     12315 Galaxy s7                     5
     12316 Notebook 9                   17
     12317 4 Door Flex                   3

6 rows selected.
